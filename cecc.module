<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Site\Settings;
use Drupal\cecc\Service\FormHelper;

/**
 * Implements hook_theme().
 */
function cecc_theme($existing, $type, $theme, $path) {
  $themeArray = [];

  $themeArray['catalog_admin_general'] = [
    'variables' => [],
  ];

  $themeArray['cec_limit_display'] = [
    'variables' => [
      'quantity_limit' => NULL,
    ],
  ];

  return $themeArray;
}

function cecc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formHelper = \Drupal::service('cecc.form_helper');
  $formHelper->alterForms($form, $form_state, $form_id);
}

/**
 * Implements hook_element_info_alter().
 */
function cecc_element_info_alter(array &$types) {
  if (isset($types['email'])) {
    // Add custom email validation for domains.
    $types['email']['#element_validate'][] = [FormHelper::class, 'validateEmail'];
  }

  if (isset($types['tel'])) {
    $types['tel']['#attached']['library'][] = 'cecc/telephone_formatter';
  }
}

/**
 * Implements hook_mail_alter().
 */
function cecc_mail_alter(array &$message) {
  // Order receipt.
  if ($message['id'] === 'commerce_order_receipt') {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $message['params']['order'];
    $config = \Drupal::config('cecc.settings');
    $siteConfig = \Drupal::config('system.site');

    $fromName = empty($config->get('email_from_name')) ? $siteConfig->get('name') :
    $config->get('email_from_name');

    $email = empty($config->get('email_from')) ? $siteConfig->get('mail') :
    $config->get('email_from');

    $message['from'] = $email;
    $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['from'];
    $message['headers']['From'] = t("@subject <@email>", [
      '@subject' => $fromName,
      '@email' => $email,
    ])->__toString();

    if (!empty($config->get('email_subject'))) {
      // Change the email subject.
      // @todo Remove this if/when it becomes configurable.
      //   https://www.drupal.org/project/commerce/issues/2924159
      $message['subject'] = t($config->get('email_subject'), [
        '@number' => $order->getOrderNumber(),
      ])->__toString();
    }
  }
}

function cecc_token_info() {
  $info = [];
  $info['tokens']['pattern']['environment'] = [
    'name' => t('Environment'),
    'description' => t('The current site environment'),
  ];

  return $info;
}

function cecc_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleableMetadata) {
  $replacements = [];

  if ($type == 'pattern') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'environment':
          $replacements[$original] = cecc_get_current_environment();
          break;
      }
    }
  }

  return $replacements;
}

function cecc_get_current_environment() {
  $environments = Settings::get('cecc_commerce_environments');
  /** @var \Symfony\Component\HttpFoundation\RequestStack $requestStack */
  $requestStack = \Drupal::service('request_stack');
  $request = $requestStack->getCurrentRequest();

  $host = $request->getSchemeAndHttpHost();

  if (empty($environments)) {
    return '';
  }

  return isset($environments[$host]) ? $environments[$host] . '-' : '';
}
